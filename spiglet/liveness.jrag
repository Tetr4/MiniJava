aspect LivenessAnalysis {
    // For the specification see docs/liveness.md
    
    /*
     * Pos
     */
    syn lazy int LabeledStmt.pos() {
        ASTNode<ASTNode> parent = this;
        
        // search procedure or program, then return position in statements list
        do {
            if (parent instanceof Procedure) {
                Procedure procedure = (Procedure)parent;
                return procedure.getStmtsRet().getStmtsList().getIndexOfChild(this);
            }
            else if(parent instanceof Program) {
                Program program = (Program)parent;
                return program.getStmtsList().getIndexOfChild(this);
            }
            
            parent = parent.getParent();
        } while(parent != null);
        
        throw new IllegalStateException("LabeledStmt has no procedure or program as parent!");
    }
    syn lazy int Stmt.pos() {
        if(getParent() instanceof LabeledStmt) {
            LabeledStmt labeledStmt = (LabeledStmt) getParent();
            return labeledStmt.pos();
        }
        throw new IllegalStateException("Statement has no LabeledStmt as parent!");
    }
    syn lazy int Label.pos() {
        ASTNode<ASTNode> parent = this;
        
        // search procedure or program, and get the statements list
        List<LabeledStmt> labeledStmts = null;
        do {
            if (parent instanceof Procedure) {
                Procedure procedure = (Procedure)parent;
                labeledStmts = procedure.getStmtsRet().getStmtsList();
            }
            else if(parent instanceof Program) {
                Program program = (Program)parent;
                labeledStmts = program.getStmtsList();
            }
            
            parent = parent.getParent();
        } while(parent != null);
        
        if(parent == null) {
            throw new IllegalStateException("Label has no procedure or program as parent!");
        }
        
        // search matching label in labeledStmts
        for(LabeledStmt labeledStmt:labeledStmts) {
            if(!labeledStmt.hasLabel()) continue;
            String labelString = labeledStmt.getLabel().getLabel();
            if(getLabel().equals(labelString)) {
                return labeledStmt.pos();
            }
        }
        throw new IllegalStateException("Found no matching label for label: "+ getLabel() +"!");
    }
    
    
    /*
     * Flow specification 
     */
    syn lazy List<Edge> LabeledStmt.flow() = getStmt().flow();
    syn lazy List<Edge> Stmt.flow();
    eq Noop.flow() = new List<Edge>().add(new Edge(pos(), pos()+1));
    eq Err.flow() = new List<Edge>();
    eq CJump.flow() {
        List<Edge> edges = new List<Edge>();
        edges.add(new Edge(pos(), pos()+1));
        edges.add(new Edge(pos(), getLabel().pos()));
        return edges;
    }
    eq Jump.flow() = new List<Edge>().add(new Edge(pos(), getLabel().pos()));
    eq HStore.flow() = new List<Edge>().add(new Edge(pos(), pos()+1));
    eq HLoad.flow() = new List<Edge>().add(new Edge(pos(), pos()+1));
    eq Move.flow() = new List<Edge>().add(new Edge(pos(), pos()+1));
    eq Print.flow() = new List<Edge>().add(new Edge(pos(), pos()+1));
    
    /*
     * Def specification 
     */
    syn lazy List<Temp> Program.def(int pos) = getStmtsList().getChild(pos).def();
    syn lazy List<Temp> Procedure.def(int pos) = getStmtsRet().getStmtsList().getChild(pos).def();
    syn lazy List<Temp> LabeledStmt.def() = getStmt().def();
    syn lazy List<Temp> Stmt.def();
    eq Noop.def() = new List<Temp>();
    eq Err.def() = new List<Temp>();
    eq CJump.def() = new List<Temp>();
    eq Jump.def() = new List<Temp>();
    eq HStore.def() = new List<Temp>().add(getAddr().copy());
    eq HLoad.def() = new List<Temp>().add(getDest().copy());
    eq Move.def() = new List<Temp>().add(getDest().copy());
    eq Print.def() = new List<Temp>();
    
    
    /*
     * Use specification 
     */
    syn lazy List<Temp> Program.use(int pos) = getStmtsList().getChild(pos).use();
    syn lazy List<Temp> Procedure.use(int pos) = getStmtsRet().getStmtsList().getChild(pos).use();
    syn lazy List<Temp> LabeledStmt.use() = getStmt().use();
    syn lazy List<Temp> Stmt.use();
    eq Noop.use() = new List<Temp>();
    eq Err.use() = new List<Temp>();
    eq CJump.use() = new List<Temp>().add(getCond().copy());
    eq Jump.use() = new List<Temp>();
    eq HStore.use() = new List<Temp>().add(getValue().copy());
    eq HLoad.use() = new List<Temp>().add(getAddr().copy());
    eq Move.use() = getSource().use();
    eq Print.use() = getValue().use();
	
	// Exp use
    syn lazy List<Temp> Exp.use();
    eq HAlloc.use() = getSize().use();
    eq Call.use() {
        List<Temp> temps = new List<Temp>();
        temps.addAll(getName().use());
        for(Temp param:getParamList()) {
            temps.add(param.copy());
        }
        return temps;
    }
    eq Binop.use() {
        List<Temp> temps = new List<Temp>();
        temps.add(getLeft().copy());
        temps.addAll(getRight().use());
        return temps;    
    }

    // SExp use
    eq TempExp.use() = new List<Temp>().add(getTemp().copy());
    eq LabelExp.use() = new List<Temp>();
    eq IntLiteral.use() = new List<Temp>(); 
    
    
    
    /*
     * Helper
     */
    void List.addAll(List<T> list) {
        for(T t:list) {
            add(t);
        }
    }
    
} 