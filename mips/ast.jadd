aspect PrintAST {
    /** 
     * Print AST
     */
    public String ASTNode.printAST() {
        StringBuilder sb = new StringBuilder();
        printAST(sb);
        return sb.toString();
    }
    public void ASTNode.printAST(StringBuilder sb) {
        printAST(sb, 0);
    }
    public void ASTNode.printAST(StringBuilder sb, int t) {
        for (int j = 0; j < t; j++) {
            sb.append((j%2==0) ? " |" : " !");
        }
        
        sb.append(getClass().getSimpleName());
        printExtra(sb);
        sb.append("\n");
        
        for (int i = 0; i < getNumChild(); i++) {
            getChild(i).printAST(sb, t+1);
        }
    }
    
    protected void ASTNode.printExtra(StringBuilder sb) {}
    
    protected void IdLabel.printExtra(StringBuilder sb) {
        sb.append("->");
        sb.append(getIdent());
    }
    
    protected void ConstExpr.printExtra(StringBuilder sb) {
        sb.append("->");
        sb.append(getInt());
    }
    
    protected void Ref.printExtra(StringBuilder sb) {
        sb.append("->");
        sb.append(getIdent());
    }
    
    protected void Min.printExtra(StringBuilder sb) {
        sb.append("->");
        sb.append(getLRef1());
        sb.append(":");
        sb.append(getLRef2());
    }
    
    protected void Globl.printExtra(StringBuilder sb) {
        sb.append("->");
        sb.append(getIdent());
    }
    
    protected void DecConst.printExtra(StringBuilder sb) {
        sb.append("->");
        sb.append(getInt());
    }
    
    protected void IdConst.printExtra(StringBuilder sb) {
        sb.append("->");
        sb.append(getIdent());
    }
    
}