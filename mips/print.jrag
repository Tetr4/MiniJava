aspect PrettyPrint {
  public class PrettyPrinter {
    public static String INDENT = "         ";
    
  	private StringBuilder sb;
  	public PrettyPrinter(){
  		sb = new StringBuilder();
  	}
  
    public void append(String s) {
       sb.append(s);
    }

    public void beginNewLine() {
       sb.append("\n");
    }
    
    public String getString() {
       return sb.toString();
    }
    
    public void reset() {
        sb.setLength(0);
    }
}

  syn lazy PrettyPrinter Program.printer() {
  	return new PrettyPrinter();
  }
  inh lazy PrettyPrinter Stmt.printer();
  eq Program.getStmt().printer() = this.printer();
  inh lazy PrettyPrinter Operand.printer();
  inh lazy PrettyPrinter Constant.printer();
  inh lazy PrettyPrinter DataConstant.printer();
  inh lazy PrettyPrinter DataMode.printer();
  
  syn boolean Stmt.hasIndent() = true;
  eq Label.hasIndent() = false;
  
  syn PrettyPrinter Program.print() {
    printer().reset();
    for (Stmt s : getStmts()) {
 	  if (s.hasIndent()) {
	    printer().append(PrettyPrinter.INDENT);
	  }
      s.print();
      printer().beginNewLine();
    }
    return printer();
  }


  public abstract void Stmt.print();
  
  public void Label.print()  { printer().append(getIdent() + ": "); }  
  
  public void Data.print() {
    getDataMode().print();
    printer().append(" ");
    getDataConstant().print();
  }  
  
  public abstract void DataMode.print();
  public void Word.print() { printer().append(".word"); }
  public void Asciiz.print() { printer().append(".asciiz"); }
  
  public abstract void DataConstant.print();
  public void IntData.print() { printer().append(getInt().toString()); }
  public void StringData.print() { printer().append("\"" + getString() + "\""); }
  
  public void Dat.print()   { printer().append(".data"); }
  public void Txt.print()   { printer().append(".text"); }
  public void Globl.print() { printer().append(".globl " + getIdent()); }  
  public void Align.print() { printer().append(".align " + getAmount()); }
  
  public abstract void Operand.print();
  public void Reg.print() { printer().append("$" + getReg()); }
  public void AddrReg.print() { 
    getConstant().print();
    printer().append("(");
    getReg().print();
    printer().append(")");
  }
  
  public abstract void Constant.print();
  public void DecConst.print() { printer().append(getInt().toString()); }
  public void IdConst.print() { printer().append(getIdent()); }
  
  syn String Instruction.asString();
  eq Add.asString() = "add"; 
  eq Addu.asString() = "addu";
  eq B.asString() = "b"; 
  eq Beqz.asString() = "beqz"; 
  eq Bne.asString() = "bne"; 
  eq J.asString() = "j"; 
  eq Jal.asString() = "jal"; 
  eq Jalr.asString() = "jalr"; 
  eq Li.asString() = "li"; 
  eq La.asString() = "la"; 
  eq Lw.asString() = "lw"; 
  eq Move.asString() = "move"; 
  eq Mul.asString() = "mul"; 
  eq Nop.asString() = "nop"; 
  eq Slt.asString() = "slt"; 
  eq Sub.asString() = "sub"; 
  eq Subu.asString() = "subu"; 
  eq Sw.asString() = "sw";   
  eq Syscall.asString() = "syscall"; 
  
  public void Opcode0.print() { printer().append(asString()); }
  public void Opcode1.print() { 
    printer().append(asString()); 
    printer().append(" ");
    getOp().print();
  }
  public void Opcode2.print() { 
    printer().append(asString()); 
    printer().append(" ");
    getOp1().print();
    printer().append(", ");
    getOp2().print();
  }
  public void Opcode3.print() { 
    printer().append(asString()); 
    printer().append(" ");
    getOp1().print();
    printer().append(", ");
    getOp2().print();
    printer().append(", ");
    getOp3().print();
  }
  
}


