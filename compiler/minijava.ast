Program   ::= Main:MainClass Decls:ClassDecl*;

abstract Decl ::= <Ident:String>;
MainClass:Decl ::= <MainArgs:String> LocalVars:TypedVar* Stmts:Stmt*;
ClassDecl:Decl ::= [SuperClass:IdentUse] Fields:TypedVar* Methods:MethodDecl*;
MethodDecl:Decl ::= RetType:TypeUse FormalParams:TypedVar* LocalVars:TypedVar* Stmts:Stmt* RetExp:Exp;
TypedVar:Decl ::= Type:TypeUse;

abstract TypeUse;
IntArray:TypeUse;
Bool:TypeUse;
Int:TypeUse;
ClassT:TypeUse ::= <Name:String>;

abstract Stmt;
Block:Stmt ::= Stmts:Stmt*;
Assign:Stmt ::= Name:IdentUse Rhs:Exp;
ArrayAssign:Stmt ::= Name:IdentUse Offset:Exp Exp:Exp;
If:Stmt ::= Cond:Exp TStmt:Stmt FStmt:Stmt;
While:Stmt ::= Cond:Exp Body:Stmt;
Print:Stmt ::= Exp:Exp;

abstract Exp;
abstract BinaryExp:Exp ::= Left:Exp Right:Exp;
And:BinaryExp;
Cmp:BinaryExp;
Add:BinaryExp;
Sub:BinaryExp;
Mult:BinaryExp;

Not:Exp ::= Exp:Exp;
IdentUse:Exp ::= <Name:String>;
ArrayAlloc:Exp ::= Size:Exp;
ObjAlloc:Exp ::= <Name:String>;
ArrayLookup:Exp ::= Exp:Exp Offset:Exp;
ArrayLength:Exp ::= Exp:Exp;
MethodCall:Exp ::= Obj:Exp <Name:String> Args:Exp*;

IntLiteral:Exp ::= <Integer:Integer>;
True:Exp;
False:Exp;
This:Exp;