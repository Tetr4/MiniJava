import java.util.HashSet;

// Traverse tree in reverse order starting from ast node to resolve (IdentUse, Assing, ...) -> look for matching declarations
aspect decl {
    syn lazy TypedVar IdentUse.decl() = findVarDecl(getName()); // FIXME ClassDecl.superClass has IdentUse as type -> can't search for ClassDecl, only TypedVar 
    syn lazy TypedVar Assign.decl() = getName().decl();
    syn lazy ClassDecl ObjAlloc.decl() = findClassDecl(getName());
    syn lazy ClassDecl ClassT.decl() = findClassDecl(getName());
    syn lazy TypedVar ArrayAssign.decl() = getName().decl();
    syn lazy ClassDecl ClassDecl.superClass() = !getSuperClass().isEmpty() ? findClassDecl(getSuperClass()) : null;
     

    syn lazy TypedVar ASTNode.findVarDecl(String ident) {
        ASTNode parent = getParent();
        if(parent != null)
            return parent.findVarDecl(ident);
        else
            return null;
    }
    
    syn lazy MethodDecl ASTNode.findMethodDecl(String ident) {
        ASTNode parent = getParent();
        if(parent != null)
            return parent.findMethodDecl(ident);
        else
            return null;
    }
    
    syn lazy ClassDecl ASTNode.findClassDecl(String ident) {
        ASTNode parent = getParent();
        if(parent != null)
            return parent.findClassDecl(ident);
        else
            return null;
    }
    
    
    eq Program.findClassDecl(String ident) {
        // FIXME MainClass is not ClassDecl
        // Check mainclass name
        //MainClass main = getMain();
        //if(ident.equals(main.getIdent())) {
        //    return main;
        //}
        // Check class names
        for(ClassDecl c: getDeclss()) {
            if(ident.equals(c.getIdent())) {
                return c;
            }
        }       
        // Declaration not found :/
        return null;
    }
    
    eq MainClass.findVarDecl(String ident) {
        // FIXME MainArgs:String[] not valid TypeUse -> not TypedVar 
        // Check variables in main method
        for(TypedVar var:getLocalVarss()) {
            if(ident.equals(var.getIdent())) {
                return var;
            }
        }
        return super.findVarDecl(ident);
    }
    
    eq ClassDecl.findMethodDecl(String ident) {
        ClassDecl curClass = this;
        do
        {
            // Check methods
            for(MethodDecl method: curClass.getMethodss()) {
                if(ident.equals(method.getIdent())) {
                    return method;
                }
            }
            curClass = curClass.superClass();
        }
        while (curClass != null);
        // TODO check for loops first 
        
        return super.findMethodDecl(ident);
    }
    
    eq ClassDecl.findVarDecl(String ident) {
        // TODO check for loops first 
        ClassDecl curClass = this;
        do
        {
            for(TypedVar field: curClass.getFieldss()) {
                if(ident.equals(field.getIdent())) {
                    return field;
                }
            }
            curClass = curClass.superClass();
        }
        while (curClass != null);
        return super.findVarDecl(ident);
    }
    
    eq MethodDecl.findVarDecl(String ident) {
        // Check parameters
        for(TypedVar param:getFormalParamss()) {
            if(ident.equals(param.getIdent())) {
                return param;
            }
        }
        // Check variables
        for(TypedVar var:getLocalVarss()) {
            if(ident.equals(var.getIdent())) {
                return var;
            }
        }
        return super.findVarDecl(ident);
    }
    
}