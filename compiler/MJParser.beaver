 // this code is inlined before the generated parser
%header {:
package minijava;
:};

%terminals INTEGER, IDENTIFIER, PUBLIC, STATIC, VOID, MAIN, STRINGTYPE, SYSOUT;
%terminals LBRACE, RBRACE, LCURLYBRACE, RCURLYBRACE, LBRACKET, RBRACKET;
%terminals COMMA, DOT, PLUS, MINUS, TIMES, AND, BANG, LESSTHAN, SEMICOLON, EQUALS;
%terminals IF, ELSE, WHILE, CLASS, EXTENDS, RETURN, TRUE, FALSE;
%terminals INTTYPE, BOOLEAN, THIS, NEW, LENGTH;

%typeof Goal = "Program";
%typeof MainClass = "MainClass";
%typeof ClassList = "List<ClassDecl>";
%typeof ClassDecl = "ClassDecl";
%typeof VarList = "List<TypedVar>";
%typeof VarDecl = "TypedVar";
%typeof MethodList = "List<MethodDecl>";
%typeof Method = "MethodDecl";
%typeof Type = "TypeUse";
%typeof Expression = "Exp";
%typeof ExpList = "List<Exp>";
%typeof Conditional = "Exp";
%typeof Relational = "Exp";
%typeof Addition = "Exp";
%typeof Multiplication = "Exp";
%typeof Unary = "Exp";
%typeof Primary = "Exp";
%typeof Postfix = "Exp";
%typeof Prefix = "Exp";
%typeof Primitive = "Exp";
%typeof ParamList = "List<TypedVar>";
%typeof StatementList = "List<Stmt>";
%typeof Statement = "Stmt";
%typeof Id = "IdentUse";

%typeof BOOLEAN = "String";
%typeof INTTYPE = "String";
%typeof INTEGER = "String";

%goal Goal;

// Productions with semantic actions building the JastAdd AST
Goal = MainClass.main ClassList.classes
	 {: return new Program(main, classes); :}
	 | MainClass.main
	 {: return new Program(main, new List<ClassDecl>()); :}
;

MainClass = CLASS IDENTIFIER.name
            LCURLYBRACE 
                PUBLIC STATIC VOID MAIN LBRACE STRINGTYPE LBRACKET RBRACKET IDENTIFIER.arg RBRACE
                LCURLYBRACE 
                    VarList.vars
                    StatementList.stmts
                RCURLYBRACE
            RCURLYBRACE
            {: return new MainClass(name, arg, vars, stmts); :}
          | CLASS IDENTIFIER.name
            LCURLYBRACE 
                PUBLIC STATIC VOID MAIN LBRACE STRINGTYPE LBRACKET RBRACKET IDENTIFIER.arg RBRACE
                LCURLYBRACE 
                    StatementList.stmts
                RCURLYBRACE
            RCURLYBRACE
            {: return new MainClass(name, arg, new List<TypedVar>(), stmts); :}
          | CLASS IDENTIFIER.name
            LCURLYBRACE 
                PUBLIC STATIC VOID MAIN LBRACE STRINGTYPE LBRACKET RBRACKET IDENTIFIER.arg RBRACE
                LCURLYBRACE 
                    VarList.vars
                RCURLYBRACE
            RCURLYBRACE
            {: return new MainClass(name, arg, vars, new List<Stmt>()); :}
          | CLASS IDENTIFIER.name
            LCURLYBRACE 
                PUBLIC STATIC VOID MAIN LBRACE STRINGTYPE LBRACKET RBRACKET IDENTIFIER.arg RBRACE
                LCURLYBRACE 
                RCURLYBRACE
            RCURLYBRACE
            {: return new MainClass(name, arg, new List<TypedVar>(), new List<Stmt>()); :}
;

ClassDecl = CLASS IDENTIFIER.name
            LCURLYBRACE
                VarList.vars?
                MethodList.methods?
            RCURLYBRACE
            {: return new ClassDecl(name, new Opt<IdentUse>(), vars==null?new List<TypedVar>():vars, methods==null?new List<MethodDecl>():methods); :}
          | CLASS IDENTIFIER.name EXTENDS Id.superClass
            LCURLYBRACE
                VarList.vars?
                MethodList.methods?
            RCURLYBRACE
            {: return new ClassDecl(name, new Opt<IdentUse>(superClass), vars==null?new List<TypedVar>():vars, methods==null?new List<MethodDecl>():methods); :}
;

ClassList = ClassDecl.c
            {:
                List<ClassDecl> list = new List<>();
                list.add(c);
                return new Symbol(list);
            :}
          | ClassList.list ClassDecl.c
            {:
                list.add(c);
                return _symbol_list;
            :}
;

VarDecl = Type.t IDENTIFIER.id SEMICOLON {: return new TypedVar(t, id); :}
;

VarList = VarDecl.v
          {:
              List<TypedVar> list = new List<>();
              list.add(v);
              return new Symbol(list);
          :}
        | VarList.list VarDecl.v
          {:
              list.add(v);
              return _symbol_list;
          :}
;

Method = PUBLIC Type.returnType IDENTIFIER.name LBRACE ParamList.params? RBRACE
         LCURLYBRACE
             VarList.vars
             StatementList.stmts
             RETURN Expression.returnExpr SEMICOLON
         RCURLYBRACE
         {: return new MethodDecl(returnType, name, params==null?new List<TypedVar>():params, vars, stmts, returnExpr); :}
       | PUBLIC Type.returnType IDENTIFIER.name LBRACE ParamList.params? RBRACE
         LCURLYBRACE
             VarList.vars
             RETURN Expression.returnExpr SEMICOLON
         RCURLYBRACE
         {: return new MethodDecl(returnType, name, params==null?new List<TypedVar>():params, vars, new List<Stmt>(), returnExpr); :}
       | PUBLIC Type.returnType IDENTIFIER.name LBRACE ParamList.params? RBRACE
         LCURLYBRACE
             StatementList.stmts
             RETURN Expression.returnExpr SEMICOLON
         RCURLYBRACE
         {: return new MethodDecl(returnType, name, params==null?new List<TypedVar>():params, new List<TypedVar>(), stmts, returnExpr); :}
       | PUBLIC Type.returnType IDENTIFIER.name LBRACE ParamList.params? RBRACE
         LCURLYBRACE
             RETURN Expression.returnExpr SEMICOLON
         RCURLYBRACE
         {: return new MethodDecl(returnType, name, params==null?new List<TypedVar>():params, new List<TypedVar>(), new List<Stmt>(), returnExpr); :}
;

MethodList = Method.m
             {: 
                 List<MethodDecl> list = new List<>();
                 list.add(m);
                 return new Symbol(list);
             :}
           | MethodList.list Method.m
             {:
                 list.add(m);
                 return _symbol_list;
             :}
;

ParamList = Type.t IDENTIFIER.id
            {:
                List<TypedVar> lst = new List<>();
                lst.add(new TypedVar(t, id));
                return new Symbol(lst);
            :}
          | ParamList.lst COMMA Type.t IDENTIFIER.id
            {:
                lst.add(new TypedVar(t, id));
                return _symbol_lst;
            :}
;

Type = INTTYPE LBRACKET RBRACKET {: return new IntArray(); :} 
     | BOOLEAN.b {: return new Bool(); :}
     | INTTYPE.i {: return new Int(); :}
     | IDENTIFIER.id  {: return new ClassT(id); :}
;

Statement = LCURLYBRACE StatementList.stmts RCURLYBRACE {: return new Block(stmts); :}
		  | LCURLYBRACE RCURLYBRACE {: return new Block(new List<Stmt>()); :}
          | IF LBRACE Expression.condition RBRACE Statement.trueBranch ELSE Statement.falseBranch {: return new If(condition, trueBranch, falseBranch); :}
          | WHILE LBRACE Expression.condition RBRACE Statement.body {: return new While(condition, body); :}
          | SYSOUT LBRACE Expression.expr RBRACE SEMICOLON {: return new Print(expr); :}
          | Id.var EQUALS Expression.value SEMICOLON {: return new Assign(var, value); :}
          | Id.var LBRACKET Expression.index RBRACKET EQUALS Expression.value SEMICOLON {: return new ArrayAssign(var, index, value); :}
;

StatementList = Statement.s
                {: List<Stmt> list = new List<>();
                    list.add(s);
                    return new Symbol(list);
                :}
              | StatementList.list Statement.s
                {:
                    list.add(s);
                    return _symbol_list;
                :}
;

Expression = Conditional;

ExpList = Expression.e
          {: 
              List<Exp> list = new List<>();
              list.add(e);
              return new Symbol(list);
          :}
        | ExpList.list COMMA Expression.e
          {:
              list.add(e);
              return _symbol_list;
          :}
;

Conditional = Relational
			| Relational.lhs AND Conditional.rhs
			{: return new And(lhs, rhs); :}
;

Relational = Addition
		   | Addition.lhs LESSTHAN Relational.rhs
		   {: return new Cmp(lhs, rhs); :}
;

Addition = Multiplication
		 | Multiplication.lhs PLUS Addition.rhs
		 {: return new Add(lhs, rhs); :}
		 | Multiplication.lhs MINUS Addition.rhs
		 {: return new Sub(lhs, rhs); :}
;

Multiplication = Unary
			   | Unary.lhs TIMES Multiplication.rhs
			   {: return new Mult(lhs, rhs); :}
;

Unary = BANG Unary.expr {: return new Not(expr); :}
	  | NEW INTTYPE LBRACKET Expression.size RBRACKET {: return new ArrayAlloc(size); :}
      | NEW IDENTIFIER.classname LBRACE RBRACE {: return new ObjAlloc(classname); :}
	  | Postfix
;

Postfix = Primary.var DOT LENGTH {: return new ArrayLength(var); :}
        | Primary
;

Primary = Prefix.var DOT IDENTIFIER.methodname LBRACE ExpList.args? RBRACE 
		  {: return new MethodCall(var, methodname, args==null?new List<Exp>():args); :}
		| Prefix.var LBRACKET Expression.offs RBRACKET
		  {: return new ArrayLookup(var, offs); :}
		| Prefix
;

Prefix = Id
	   | THIS {: return new This(); :}
	   | LBRACE Expression.expr RBRACE
	   | Primitive
;

Primitive = INTEGER.i {: return new IntLiteral(Integer.parseInt(i)); :}
		  | TRUE {: return new True(); :}
          | FALSE {: return new False(); :}
;

Id = IDENTIFIER.id
   {: return new IdentUse(id); :}
;