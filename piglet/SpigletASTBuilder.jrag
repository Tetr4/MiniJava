import spiglet.*;
import java.util.HashMap;
import java.util.Map;

aspect SpigletASTBuilder {

    // counter for temps
    public static int Program.currentTemp;
    // spiglet uses more temps -> remember which piglet temp belongs to which spiglet temp and reuse
    public static Map<Integer, Integer> Program.pigletToSpigletTemps;
    
    syn lazy spiglet.Program Program.toSpiglet() { // Stmts:LabeledStmt* Procs:Procedure*
        currentTemp = 0;
        pigletToSpigletTemps = new HashMap<Integer, Integer>(); 
        
        // statements
        spiglet.List<spiglet.LabeledStmt> statements = new spiglet.List<spiglet.LabeledStmt>();
        for (LabeledStmt labeledStmt: getStmtsList()) {
            // add all
            for (spiglet.LabeledStmt stmt : labeledStmt.toSpiglet()) {
                statements.add(stmt);
            }
        }
        
        // procedures
        spiglet.List<spiglet.Procedure> procedures = new spiglet.List<spiglet.Procedure>();
        for (Procedure procedure: getProcsList()) {
            procedures.add(procedure.toSpiglet());
        }
        
        return new spiglet.Program(statements, procedures);
    }
    
    syn lazy spiglet.List<spiglet.LabeledStmt> LabeledStmt.toSpiglet() { // [Label] Stmt:Stmt
        // opt label
        spiglet.Opt<spiglet.Label> opt;
        if(hasLabel()) {
            opt = new spiglet.Opt<spiglet.Label>(getLabel().toSpiglet());
        } else {
            opt = new spiglet.Opt<spiglet.Label>();
        }
        
        // statement (may generate multiple spiglet statements)
        spiglet.List<spiglet.LabeledStmt> labeledStmts = new spiglet.List<spiglet.LabeledStmt>();
        boolean labelSet = false;
        for (spiglet.Stmt statement: getStmt().toSpiglet()) {
            if(!labelSet) {
                // label only on first statement
                labeledStmts.add(new spiglet.LabeledStmt(opt, statement));
                labelSet = true;
            } else {
                // no label
                labeledStmts.add(new spiglet.LabeledStmt(new spiglet.Opt<spiglet.Label>(), statement));
            }
        }
        
        return labeledStmts;
    }
    
    syn lazy spiglet.Procedure Procedure.toSpiglet() { // Label <Integer:Integer> StmtsRet:StmtExp
        // reset temp helpers for each procedure
        Program.currentTemp = getInteger(); // skip temps reserved for args
        Program.pigletToSpigletTemps.clear();
        
        return new spiglet.Procedure(getLabel().toSpiglet(), getInteger(), getStmtsRet().toSpigletStmtExp()); 
    }
    
    
    /*
     * STATEMENTS
     */
    syn lazy spiglet.List<spiglet.Stmt> Stmt.toSpiglet();
    eq Noop.toSpiglet() = convertToStmtList(new spiglet.Noop());
    eq Err.toSpiglet() = convertToStmtList(new spiglet.Err());
    eq CJump.toSpiglet() = null; // Cond:Exp Label:Label
    eq Jump.toSpiglet() = convertToStmtList(new spiglet.Jump(getLabel().toSpiglet())); // Label:Label
    eq HStore.toSpiglet() = null; // Addr:Exp <Offset:Integer> Value:Exp
    eq HLoad.toSpiglet() = null; // Dest:Temp Addr:Exp <Offset:Integer>
    eq Move.toSpiglet() = null; // Dest:Temp Source:Exp
    eq Print.toSpiglet() = convertToStmtList(new spiglet.Print( (spiglet.SExp) getValue().toSpiglet() )); // Value:Exp
    
    
        
    /*
     * EXPRESSIONS
     */
    syn lazy spiglet.Exp Exp.toSpiglet();
    
    // special case for StmtExp (spiglets StmtExp is not an Exp)
    syn lazy spiglet.StmtExp StmtExp.toSpigletStmtExp() { // Stmts:LabeledStmt* RetExp:Exp
    
        // statements
        spiglet.List<spiglet.LabeledStmt> statements = new spiglet.List<spiglet.LabeledStmt>();
        for (LabeledStmt labeledStmt: getStmtsList()) {
            // add all
            for (spiglet.LabeledStmt stmt : labeledStmt.toSpiglet()) {
                statements.add(stmt);
            }
        }
        
        // ret exp
        // TODO check if cast is alway successful
        spiglet.SExp retExp = (spiglet.SExp) getRetExp().toSpiglet();
        
        return new spiglet.StmtExp(statements, retExp);
    }
    eq StmtExp.toSpiglet() = null;
    
    eq Call.toSpiglet() = null; // Name:Exp Param:Exp*
    eq HAlloc.toSpiglet() = null; // Size:Exp
    eq TempExp.toSpiglet() = new spiglet.TempExp(getTemp().toSpiglet()); // Temp:Temp
    eq LabelExp.toSpiglet() = new spiglet.LabelExp(getLabel().toSpiglet()); // Label:Label
    eq Binop.toSpiglet() = null; // Left:Exp Right:Exp
    
    //abstract Literal:Exp;
    eq IntLiteral.toSpiglet() = new spiglet.IntLiteral(getInteger()); // <Integer:Integer>

    syn lazy spiglet.Temp Temp.toSpiglet() = new spiglet.Temp(getNumber()); // <Number:Integer>
    syn lazy spiglet.Label Label.toSpiglet() = new spiglet.Label(getLabel()); // <Label>
    
    
    /*
     * HELPERS
     */
     syn spiglet.List<spiglet.Stmt> Stmt.convertToStmtList(spiglet.Stmt stmt) {
        spiglet.List<spiglet.Stmt> list = new spiglet.List<spiglet.Stmt>();
        list.add(stmt);
        return list;
    }
    
     syn spiglet.List<spiglet.Exp> Exp.convertToExpList(spiglet.Exp exp) {
        spiglet.List<spiglet.Exp> list = new spiglet.List<spiglet.Exp>();
        list.add(exp);
        return list;
    }
    
}