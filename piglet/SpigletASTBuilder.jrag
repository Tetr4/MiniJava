import spiglet.*;
import java.util.HashMap;
import java.util.Map;

aspect SpigletASTBuilder {

    // counter for temps
    public static int Program.currentTemp;
    // spiglet uses more temps -> remember which piglet temp belongs to which spiglet temp and reuse
    public static Map<Integer, Integer> Program.pigletToSpigletTemps;
    
    private static void Program.reset() {
        currentTemp = 0;
        pigletToSpigletTemps = new HashMap<Integer, Integer>(); 
    }
    
    // Program
    syn lazy spiglet.Program Program.toSpiglet() {
        // Reset builder state
        reset();
        
        // statements
        spiglet.List<spiglet.LabeledStmt> statements = new spiglet.List<spiglet.LabeledStmt>();
        for (LabeledStmt labeledStmt: getStmtsList()) {
            statements.add(labeledStmt.toSpiglet(statements));
        }
        
        // procedures
        spiglet.List<spiglet.Procedure> procedures = new spiglet.List<spiglet.Procedure>();
        for (Procedure procedure: getProcsList()) {
            procedures.add(procedure.toSpiglet());
        }
        
        return new spiglet.Program(statements, procedures);
    }
    
    
    // LabeledStmt
    syn lazy spiglet.LabeledStmt LabeledStmt.toSpiglet(spiglet.List<spiglet.LabeledStmt> stmts) {
        // remember how many statements are in the list, so we can see how many are generated
        int stmtsSize = stmts.getNumChild();
        
        // generate statement(s)
        spiglet.Stmt stmt = getStmt().toSpiglet(stmts);
        
        spiglet.Opt<spiglet.Label> emptyLabel = new spiglet.Opt<spiglet.Label>();
        if(hasLabel()) {
            spiglet.Opt<spiglet.Label> label = new spiglet.Opt<spiglet.Label>(getLabel().toSpiglet());
            if (stmts.getNumChild() > stmtsSize) {
	            // add the label at the first statement, because multiple statements have been generated
	            spiglet.LabeledStmt firstStmt = stmts.getChild(stmtsSize);
	            firstStmt.setLabelOpt(label);
	            // return without label, as it is already on the first statement
	            return new spiglet.LabeledStmt(emptyLabel, stmt);
            } else {
                // return with label, as it is the only statement
                return new spiglet.LabeledStmt(label, stmt);    
            }
        } else {
            // has no label
            return new spiglet.LabeledStmt(emptyLabel, stmt);
        }
    }
    
    // Procedure
    syn lazy spiglet.Procedure Procedure.toSpiglet() {
        // reset temp helpers for each procedure
        Program.pigletToSpigletTemps.clear();
        Program.currentTemp = getInteger(); // skip temps reserved for args
        // Params have to have the right temp index.
        for(int i = 0; i < getInteger(); i++) {
            Program.pigletToSpigletTemps.put(i, i);
        }
        
        return new spiglet.Procedure(getLabel().toSpiglet(), getInteger(), getStmtsRet().toSpigletStmtExp()); 
    }
    
    
    /*
     * STATEMENTS
     */
    syn lazy spiglet.Stmt Stmt.toSpiglet(spiglet.List<spiglet.LabeledStmt> stmts);
    
    // NOOP
    eq Noop.toSpiglet(spiglet.List<spiglet.LabeledStmt> stmts) = new spiglet.Noop();
    
    // Err
    eq Err.toSpiglet(spiglet.List<spiglet.LabeledStmt> stmts) = new spiglet.Err();
    
    // Cjump
    eq CJump.toSpiglet(spiglet.List<spiglet.LabeledStmt> stmts) {
        spiglet.Temp condTemp = getCond().toSpigletTemp(stmts);
        spiglet.Label label = getLabel().toSpiglet();
        return new spiglet.CJump(condTemp, label);
    }
    
    // Jump
    eq Jump.toSpiglet(spiglet.List<spiglet.LabeledStmt> stmts) = new spiglet.Jump(getLabel().toSpiglet());
    
    // Hstore
    eq HStore.toSpiglet(spiglet.List<spiglet.LabeledStmt> stmts) {
        spiglet.Temp addrTemp = getAddr().toSpigletTemp(stmts);
        int offset = getOffset();
        spiglet.Temp valueTemp = getValue().toSpigletTemp(stmts);
        return new spiglet.HStore(addrTemp, offset, valueTemp);
    }
    
    // Hload
    eq HLoad.toSpiglet(spiglet.List<spiglet.LabeledStmt> stmts) {
        spiglet.Temp destTemp = getDest().toSpiglet();
        spiglet.Temp addrTemp = getAddr().toSpigletTemp(stmts);
        int offset = getOffset();
        return new spiglet.HLoad(destTemp, addrTemp, offset);
    }
    
    // Move
    eq Move.toSpiglet(spiglet.List<spiglet.LabeledStmt> stmts) {
        spiglet.Exp source = getSource().toSpigletExp(stmts);
        // create the destination temp AFTER the source,
        // to keep the temp numbers growing linearly.
        spiglet.Temp destTemp = getDest().toSpiglet();
        return new spiglet.Move(destTemp, source);
    }
    
    // Print
    eq Print.toSpiglet(spiglet.List<spiglet.LabeledStmt> stmts) {
        spiglet.SExp valueSExp = getValue().toSpigletSExp(stmts);
        return new spiglet.Print(valueSExp);
    }
    
    
        
    /*
     * EXPRESSIONS
     */
    // Exp -> Exp
    syn lazy spiglet.Exp Exp.toSpigletExp(spiglet.List<spiglet.LabeledStmt> stmts);
    eq StmtExp.toSpigletExp(spiglet.List<spiglet.LabeledStmt> stmts) {
        for(LabeledStmt stmt:getStmtsList()) {
            stmts.add(stmt.toSpiglet(stmts));
        }
        return getRetExp().toSpigletExp(stmts);
    }
    eq Call.toSpigletExp(spiglet.List<spiglet.LabeledStmt> stmts) {
        spiglet.SExp name = getName().toSpigletSExp(stmts);
        spiglet.List<spiglet.Temp> params = new spiglet.List<spiglet.Temp>();
        for(Exp param: getParamList()) {
            params.add(param.toSpigletTemp(stmts));
        }
        return new spiglet.Call(name, params);
    } 
    eq HAlloc.toSpigletExp(spiglet.List<spiglet.LabeledStmt> stmts) {
        spiglet.SExp size = getSize().toSpigletSExp(stmts);
        return new spiglet.HAlloc(size);
    }
    eq TempExp.toSpigletExp(spiglet.List<spiglet.LabeledStmt> stmts) {
        return toSpigletSExp(stmts);
    }
    eq LabelExp.toSpigletExp(spiglet.List<spiglet.LabeledStmt> stmts) {
        return toSpigletSExp(stmts);
    }
    eq IntLiteral.toSpigletExp(spiglet.List<spiglet.LabeledStmt> stmts) {
        return toSpigletSExp(stmts);
    }
    eq Lt.toSpigletExp(spiglet.List<spiglet.LabeledStmt> stmts) {
        spiglet.Temp left = getLeft().toSpigletTemp(stmts);
        spiglet.SExp right = getRight().toSpigletSExp(stmts);
        return new spiglet.Lt(left, right);
    }
    eq Plus.toSpigletExp(spiglet.List<spiglet.LabeledStmt> stmts) {
        spiglet.Temp left = getLeft().toSpigletTemp(stmts);
        spiglet.SExp right = getRight().toSpigletSExp(stmts);
        return new spiglet.Plus(left, right);
    }
    eq Minus.toSpigletExp(spiglet.List<spiglet.LabeledStmt> stmts) {
        spiglet.Temp left = getLeft().toSpigletTemp(stmts);
        spiglet.SExp right = getRight().toSpigletSExp(stmts);
        return new spiglet.Minus(left, right);
    }
    eq Times.toSpigletExp(spiglet.List<spiglet.LabeledStmt> stmts) {
        spiglet.Temp left = getLeft().toSpigletTemp(stmts);
        spiglet.SExp right = getRight().toSpigletSExp(stmts);
        return new spiglet.Times(left, right);
    }
	
	// Exp -> SExp
    syn lazy spiglet.SExp Exp.toSpigletSExp(spiglet.List<spiglet.LabeledStmt> stmts);
    eq StmtExp.toSpigletSExp(spiglet.List<spiglet.LabeledStmt> stmts) {
        for(LabeledStmt stmt:getStmtsList()) {
            stmts.add(stmt.toSpiglet(stmts));
        }
        return getRetExp().toSpigletSExp(stmts);
    }
    eq Call.toSpigletSExp(spiglet.List<spiglet.LabeledStmt> stmts) {
        return new spiglet.TempExp(toSpigletTemp(stmts));
    }
    eq HAlloc.toSpigletSExp(spiglet.List<spiglet.LabeledStmt> stmts) {
        return new spiglet.TempExp(toSpigletTemp(stmts));
    }
    eq TempExp.toSpigletSExp(spiglet.List<spiglet.LabeledStmt> stmts) {
        spiglet.Temp temp = getTemp().toSpiglet();
        return new spiglet.TempExp(temp);
    }
    eq LabelExp.toSpigletSExp(spiglet.List<spiglet.LabeledStmt> stmts) {
        spiglet.Label label = getLabel().toSpiglet();
        return new spiglet.LabelExp(label);
    }
    eq IntLiteral.toSpigletSExp(spiglet.List<spiglet.LabeledStmt> stmts) {
        return new spiglet.IntLiteral(getInteger());
    }
    eq Binop.toSpigletSExp(spiglet.List<spiglet.LabeledStmt> stmts) {
        return new spiglet.TempExp(toSpigletTemp(stmts));
    }
    
    // Exp -> Temp
    syn lazy spiglet.Temp Exp.toSpigletTemp(spiglet.List<spiglet.LabeledStmt> stmts) {
        spiglet.Exp exp = toSpigletExp(stmts);
        
        // move into temp
        spiglet.Move move = new spiglet.Move(new spiglet.Temp(Program.currentTemp), exp);
        spiglet.Opt emptyLabel = new spiglet.Opt<spiglet.Label>();
        stmts.add(new spiglet.LabeledStmt(emptyLabel, move));
        
        return new spiglet.Temp(Program.currentTemp++);
    }
    
    eq TempExp.toSpigletTemp(spiglet.List<spiglet.LabeledStmt> stmts) {
        return getTemp().toSpiglet();
    }
    

    /*
     * OTHER
     */
    
    // Generate a new spiglet temp number, if this is the first time we encounter this temp in piglet.
    // Use the old one, if this temp is reused.
    syn lazy spiglet.Temp Temp.toSpiglet() {
        if(Program.pigletToSpigletTemps.containsKey(getNumber())) {
            return new spiglet.Temp(Program.pigletToSpigletTemps.get(getNumber()));
        } 
        Program.pigletToSpigletTemps.put(getNumber(), Program.currentTemp);
        return new spiglet.Temp(Program.currentTemp++);
    }
    
    syn lazy spiglet.Label Label.toSpiglet() = new spiglet.Label(getLabel()); 
    
    // special case, used by procedure
    syn lazy spiglet.StmtExp StmtExp.toSpigletStmtExp() {
        spiglet.List<spiglet.LabeledStmt> stmts = new spiglet.List<spiglet.LabeledStmt>();
        for(LabeledStmt stmt:getStmtsList()) {
            stmts.add(stmt.toSpiglet(stmts));
        }
        
        spiglet.SExp retExp = getRetExp().toSpigletSExp(stmts);
        
        return new spiglet.StmtExp(stmts, retExp);
    }
    
    
    /*
     * HELPERS
     */
     syn spiglet.List<spiglet.Stmt> Stmt.convertToStmtList(spiglet.Stmt stmt) {
        spiglet.List<spiglet.Stmt> list = new spiglet.List<spiglet.Stmt>();
        list.add(stmt);
        return list;
    }
   
    public void ASTNode.addAll(spiglet.List<spiglet.LabeledStmt> statements, spiglet.List<spiglet.LabeledStmt> additionalStatements) {
        for (spiglet.LabeledStmt stmt: additionalStatements) {
            statements.add(stmt);
        }
    }

}